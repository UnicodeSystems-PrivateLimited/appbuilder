import { Component, ViewEncapsulation, HostListener, ViewChild } from '@angular/core';
import { PageService, GridDataService } from '../../theme/services';
import { AppState } from '../../app.state';
import {
    DROPDOWN_DIRECTIVES,
    TAB_DIRECTIVES,
    TOOLTIP_DIRECTIVES,
    PAGINATION_DIRECTIVES,
    TabsetComponent
} from 'ng2-bootstrap/ng2-bootstrap';
import { SettingsService } from '../settings/settings.service';
import {
    QrImgGenerationData,
    AppConfigPromoteSetting,
    AppShareingSetting,
    AppConfigSetting,
    EmailMarketingSetting
} from '../../theme/interfaces';
import { Dialog, Dropdown, RadioButton, MultiSelect, SelectItem } from 'primeng/primeng';
import { CPromoteService } from './c-promote.service';
import { Http, URLSearchParams, Response, Headers, RequestOptions } from '@angular/http';
import { MailingList, MailingListCategory, Tab, MailChimp, IContact } from '../../theme/interfaces';
import { MailingListTabService } from '../settings/tabs-content/tab-functions/mailing-list-tab/mailing-list-tab.service';
import { AddCountPipe } from '../../theme/pipes';
import { ChartistJs } from "../charts/components/chartistJs/chartistJs.component";
import { Chartist } from "../../theme/components/baChartistChart/baChartistChart.loader";
import { RouteParams } from '@angular/router-deprecated';

require("chartist-plugin-tooltips");

@Component({
    selector: 'c-promote',
    directives: [DROPDOWN_DIRECTIVES, PAGINATION_DIRECTIVES, TAB_DIRECTIVES, TOOLTIP_DIRECTIVES, Dropdown, RadioButton, Dialog, MultiSelect, ChartistJs],
    encapsulation: ViewEncapsulation.None,
    styles: [require('../settings/settings.scss')],
    template: require('./c-promote.component.html'),
    pipes: [AddCountPipe],
    providers: [GridDataService, PageService, SettingsService, CPromoteService, MailingListTabService]
})

export class CPromote {
    public appId: number = null;
    public appCode: string = null;
    public appDetails: any = null;
    public iosAppUrl: string = null;
    public iosAppQr: string = null;
    public mobWebsiteUrl: string = null;
    public mobWebsiteQr: string = null;
    public androidAppUrl: string = null;
    public androidAppQr: string = null;
    public qrImgGenerationData: QrImgGenerationData = new QrImgGenerationData();
    public clientLocations = [];
    public selectedLocation: number = 1;
    public appConfigPromoteData: AppConfigPromoteSetting = new AppConfigPromoteSetting();
    public appShareingSetting: AppShareingSetting = new AppShareingSetting();
    public disableSaveButton: boolean = false;
    public appConfigData: AppConfigSetting = new AppConfigSetting();
    public showBackgroundChooser: boolean = false;
    public autoGeneratedScreenShot: any = [];
    public promoteUploadedImages: any = [];
    public fileToUpload: any = null;
    public file_target: any = null;
    public targetedImageId: number = null;
    public defaultImage: string = "assets/img/c-promote.png";
    private _downloadBgUrl: string = "../api/ws/function/CustomerPortal/promote/download/bg/image";
    public uploadBottonDisable: boolean = false;
    public bgImage: string = "assets/img/c-promote.png";
    // *********************** Email Marketting *************************//
    public tabList = [];
    // public selectedTabs: string[] = [];
    // public selectedPromptFrequency: number = 2;
    public emailMarketingSetting: EmailMarketingSetting = new EmailMarketingSetting();
    public PromptFrequency = [{ label: 'Never', value: 1 }, 
    { label: 'Every Time', value: 7 },
    {
        label: 'Once A Day',
        value: 2
    }, { label: 'Every Two Days', value: 3 }, { label: 'Every Three Days', value: 4 }, {
        label: 'Every Week',
        value: 5
    }, { label: 'Every Month', value: 6 }];
    public charCount: number = 128;
    public showEmailMarketingUserModel: boolean = false;
    public emailMarketingUserList: Array<any> = [];
    public checkAll: boolean = false;
    public selectedEmailIds: boolean[] = [];
    public showLoader: boolean = false;
    public showMailchimpDialogBox: boolean = false;
    public showiContactDialogBox: boolean = false;
    public mailChimp: MailChimp = new MailChimp();
    public iContact: IContact = new IContact();
    public disableAddButton: boolean = false;
    public account = [];
    public folder = [];
    public lists = [];
    public showConstantContactDialogBox: boolean = false;
    public showCampaignMonitorDialogBox: boolean = false;
    public showGetResponseDialogBox: boolean = false;
    public showMyEmmaDialogBox: boolean = false;
    public newMailingListUserEmaiCount: number = 0;
    public showUserActivityLoader = false;
    public userActivityList: any = [];
    public showActivityList: any = [];
    public toggleSocialActivity: Array<boolean> = [];
    public toggleFeatureActivity: Array<boolean> = [];
    public checkAllUserList: boolean = false;
    public selectedUsersIds: boolean[] = [];
    public totalItems: number = 0;
    public currentPage: number = 1;
    public itemsPerPage: number = 20;
    public maxSize: number = 4;
    public count: SelectItem[];
    public selectedCount: any;
    public showChart: Array<boolean> = [];
    public chartData: any = [];
    public featureActivityList: any = [];
    public showFeatureActivityList: any = [];
    public chartTooltipOptions: Object;
    public chartBarOptions: Object;
    @ViewChild('cPromoteTab') cPromoteTab: TabsetComponent;
    public tabType: number = null;
    public showMainLoader: boolean = false;

    constructor(
        protected appState: AppState,
        private settingService: SettingsService,
        private service: CPromoteService,
        public pageService: PageService,
        private malingService: MailingListTabService,
        private params: RouteParams,
        private _http: Http
    ) {
        this.appId = parseInt(sessionStorage.getItem('appId'));
        this.appCode = sessionStorage.getItem('appCode');
        if (params.get('tab_type')) {
            this.tabType = parseInt(params.get('tab_type'));

        }
        PageService.showpushNotificationButton = false;
        this.chartTooltipOptions = { appendToBody: true };
        this.chartBarOptions = {
            fullWidth: true,
            low: 0,
            height: "200px",
            width: "650px",
            plugins: [Chartist.plugins.tooltip(this.chartTooltipOptions)],
            axisY: { onlyInteger: true },
            axisX: { showGrid: false, showLabel: false },
            seriesBarDistance: 10,
        };
        this.getInitData();
        this.userActivitySelected();
    }

    public getInitData(): void {
        this.showMainLoader = true;
        this.service.getInitData(this.appId).subscribe(res => {
            if (res.success) {
                this.appDetails = res['appData'];
                for (let item of res['contactList']) {
                    this.clientLocations.push({ label: item.address_sec_1 + item.address_sec_2, value: item.id })
                }
                if (res['appPromoteConfigData']) {
                    if (res['appPromoteConfigData']['app_share_config_data'])
                        this.appShareingSetting = res['appPromoteConfigData']['app_share_config_data'];
                    if (res['appPromoteConfigData']['config_data'])
                        this.appConfigData = res['appPromoteConfigData']['config_data'];
                    if (res['appPromoteConfigData']['email_marketing_config_data']) {
                        this.emailMarketingSetting = res['appPromoteConfigData']['email_marketing_config_data'];
                        this.onCharCount();
                    }
                }
                if (!this.appShareingSetting.location && res['contactList'].length) {
                    this.appShareingSetting.location = res['contactList'][0].id;
                }
                if (res['appIphoneFourScreenShot']) {
                    if (res['appIphoneFourScreenShot'].screen_shot_1)
                        this.autoGeneratedScreenShot.push({
                            id: -1,
                            bg_image: res['appIphoneFourScreenShot'].screen_shot_1
                        });
                    if (res['appIphoneFourScreenShot'].screen_shot_2)
                        this.autoGeneratedScreenShot.push({
                            id: -2,
                            bg_image: res['appIphoneFourScreenShot'].screen_shot_2
                        });
                    if (res['appIphoneFourScreenShot'].screen_shot_3)
                        this.autoGeneratedScreenShot.push({
                            id: -3,
                            bg_image: res['appIphoneFourScreenShot'].screen_shot_3
                        });
                    if (res['appIphoneFourScreenShot'].screen_shot_4)
                        this.autoGeneratedScreenShot.push({
                            id: -4,
                            bg_image: res['appIphoneFourScreenShot'].screen_shot_4
                        });
                    if (res['appIphoneFourScreenShot'].screen_shot_5)
                        this.autoGeneratedScreenShot.push({
                            id: -5,
                            bg_image: res['appIphoneFourScreenShot'].screen_shot_5
                        });
                }
                this.tabList = res['emailMarketingTabList'];
                this.tabList.unshift({ value: 0, label: 'Launch' })
                this.emailMarketingUserList = res['emailMarketingUserList'];
                this.newMailingListUserEmaiCount = res['emailMarkettingNewUser'];
                if (this.appShareingSetting.promote_bg_image)
                    this.bgImage = this.appShareingSetting.promote_bg_image;
                this.promoteUploadedImages = res['uploadedImages'];
                this.getQrImgs('init');
            }
            this.showMainLoader = false;
            setTimeout(() => {
                if (this.tabType) {
                    this.cPromoteTab.tabs[2].active = true;
                    console.log("this.cPromoteTab", this.cPromoteTab);
                }
            })

        });
    }


    public getQrImgs(type: string): void {
        let qrUrls: any[] = [];
        if (this.appConfigData.ios_url) {
            this.iosAppUrl = this.appConfigData.ios_url;
            qrUrls.push(this.iosAppUrl);
        }
        if (this.appConfigData.android_url) {
            this.androidAppUrl = this.appConfigData.android_url;
            qrUrls.push(this.androidAppUrl);
        }
        this.mobWebsiteUrl = 'http://yourmobileschoolapp.us/ion/?app_code=' + this.appCode;
        qrUrls.push(this.mobWebsiteUrl);
        this.qrImgGenerationData.urls = qrUrls;
        this.iosAppUrl = this.iosAppUrl ? encodeURIComponent(this.iosAppUrl) : this.iosAppUrl;
        this.mobWebsiteUrl = encodeURIComponent(this.mobWebsiteUrl);
        this.androidAppUrl = this.androidAppUrl ? encodeURIComponent(this.androidAppUrl) : this.androidAppUrl;
        this.settingService.getQrImgs(this.qrImgGenerationData).subscribe(res => {
            if (res.success) {
                if (this.iosAppUrl && this.androidAppUrl) {
                    this.iosAppQr = res.data[0];
                    this.androidAppQr = res.data[1];
                    this.mobWebsiteQr = res.data[2];
                } else if (this.iosAppUrl || this.androidAppUrl) {
                    if (this.iosAppUrl) {
                        this.iosAppQr = res.data[0];
                    } else {
                        this.androidAppQr = res.data[0];
                    }
                    this.mobWebsiteQr = res.data[1];
                } else {
                    this.mobWebsiteQr = res.data[0];
                }
                if (type === 'rebuild') {
                    this.pageService.showSuccess('QR codes have been generated successfully.');
                }
            } else {
                if (type === 'rebuild') {
                    this.pageService.showError('Unable to generate QR codes.');
                }
            }
        });
    }

    public socialShare(service: string): void {
        let url;
        let fullUrl = window.location.origin;
        let link_url = this.mobWebsiteUrl;
        let title = encodeURIComponent("Home - " + this.appDetails.app_name);
        let picture = encodeURIComponent(this.appDetails.background_img);
        let description = encodeURIComponent("Check out this app I'm building through " + this.appDetails.client_email + "! HTML5:" + decodeURIComponent(this.mobWebsiteUrl));
        if (service == 'facebook') {
            if (picture !== "null") {
                url = "https://www.facebook.com/sharer/sharer.php?title=" + title + "&description=" + description + "&u=" + link_url + "&picture=" + picture;
            } else {
                url = "https://www.facebook.com/sharer/sharer.php?title=" + title + "&description=" + description + "&u=" + link_url;
            }

        } else if (service == 'twitter') {
            url = "https://twitter.com/intent/tweet?text=" + title + "&url=" + link_url + "&original_referer=" + link_url + "&picture=" + picture;
        } else if (service == 'googleplus') {
            url = "http://plus.google.com/share?url=" + link_url + "&title=" + title + "&description=" + description + "&image=" + picture + "&hl=";
        } else if (service == 'linkedin') {
            url = "https://www.linkedin.com/shareArticle??mini=true&url=" + link_url + "&title=" + title + "&summary=" + description + "&image=" + picture;
        }
        window.open(url, "Test", "width=550,height=270,left=150,top=200,toolbar=0,status=0");
    }

    public savePromoteSetting(): void {
        this.disableSaveButton = true;
        this.appConfigPromoteData.app_id = this.appId;
        this.appShareingSetting.mobile_website_redirect = this.appShareingSetting.mobile_website_redirect ? 1 : 0;
        this.appShareingSetting.location = this.appShareingSetting.location;
        this.appShareingSetting.location_show = this.appShareingSetting.location_show ? 1 : 0;
        this.appShareingSetting.phone_show = this.appShareingSetting.phone_show ? 1 : 0;
        this.appShareingSetting.email_show = this.appShareingSetting.email_show ? 1 : 0;
        this.appConfigPromoteData.app_share_setting = this.appShareingSetting;
        this.appConfigPromoteData.emailMarketing = this.emailMarketingSetting;
        this.service.savePromoteSetting(this.appConfigPromoteData).subscribe((res) => {
            if (res.success) {
                this.pageService.showSuccess(res.message);
            } else {
                this.pageService.showError(res.message);
            }
            this.disableSaveButton = false;
        });
    }

    public rebuildCodes(): void {
        this.getQrImgs('rebuild');
    }

    public showHideBackgroundSelector(): void {
        this.getSelectedImage(this.appShareingSetting.promote_bg_image);
        this.showBackgroundChooser = true;
        this.pageService.onDialogOpen();
    }


    public uploadPromoteImages(): void {
        let data = { image: this.fileToUpload, appId: this.appId };
        this.uploadBottonDisable = true;
        this.showLoader = true;
        this.service.savePromoteImages(data).subscribe((res) => {
            if (res.success) {
                this.promoteUploadedImages.push({ id: res['id'], bg_image: res['image'] });
                this.pageService.showSuccess(res.message);
            } else {
                this.pageService.showError(res.message);
            }
            this.uploadBottonDisable = false;
            this.showLoader = false;
            this.clearInputs();
        });
    }

    public clearInputs(): void {
        this.file_target.value = null;
        this.fileToUpload = null;
    }

    public fileChangeEvent(event: any): void {
        this.file_target = event.target;
        this.fileToUpload = event.target.files[0];
    }

    public targetImage(id: number): void {
        this.targetedImageId = id;
    }

    public getSelectedImage(image: string): void {
        for (var i = 0; i < this.autoGeneratedScreenShot.length; i++) {
            if (image === this.autoGeneratedScreenShot[i].bg_image) {
                this.targetedImageId = this.autoGeneratedScreenShot[i].id;
                break;
            }
        }
        for (var i = 0; i < this.promoteUploadedImages.length; i++) {
            if (image === this.promoteUploadedImages[i].bg_image) {
                this.targetedImageId = this.promoteUploadedImages[i].id;
                break;
            }
        }
    }

    public selectPromoteImages(): void {
        for (var i = 0; i < this.autoGeneratedScreenShot.length; i++) {
            if (this.targetedImageId === this.autoGeneratedScreenShot[i].id) {
                this.appShareingSetting.promote_bg_image = this.autoGeneratedScreenShot[i].bg_image;
                break;
            }
        }
        for (var i = 0; i < this.promoteUploadedImages.length; i++) {
            if (this.targetedImageId === this.promoteUploadedImages[i].id) {
                this.appShareingSetting.promote_bg_image = this.promoteUploadedImages[i].bg_image;
                break;
            }
        }
        this.bgImage = this.appShareingSetting.promote_bg_image;
        this.showBackgroundChooser = false;
    }

    public deleteImages(): void {
        let image = null;
        let index = null;
        for (var i = 0; i < this.promoteUploadedImages.length; i++) {
            if (this.targetedImageId === this.promoteUploadedImages[i].id) {
                image = this.promoteUploadedImages[i];
                index = i;
                break;
            }
        }
        if (image) {
            var yes = window.confirm("Do you really want to delete image? ");
            if (yes) {
                let type = (this.appShareingSetting.promote_bg_image === image.bg_image) ? 1 : 2;//1=>(targated & deleted image same) 2=> for delete image
                this.service.deletePromoteImages(image.id, type).subscribe((res) => {
                    if (res.success) {
                        if (this.appShareingSetting.promote_bg_image === image.bg_image) {
                            this.appShareingSetting.promote_bg_image = null;
                            this.bgImage = this.defaultImage;
                            this.targetedImageId = null;
                        } else {
                            this.getSelectedImage(this.appShareingSetting.promote_bg_image);
                        }
                        this.promoteUploadedImages.splice(index, 1);
                    } else {
                        console.log("server error occure");
                    }
                });
            }
        }
    }

    public downloadBgImage(): void {
        let url = null;
        for (var i = 0; i < this.autoGeneratedScreenShot.length; i++) {
            if (this.targetedImageId === this.autoGeneratedScreenShot[i].id) {
                url = this.autoGeneratedScreenShot[i].bg_image;
                break;
            }
        }
        for (var i = 0; i < this.promoteUploadedImages.length; i++) {
            if (this.targetedImageId === this.promoteUploadedImages[i].id) {
                url = this.promoteUploadedImages[i].bg_image;
                break;
            }
        }
        url = url ? encodeURIComponent(url) : url;
        if (url) {
            url = this._downloadBgUrl + "?url=" + url;
            window.open(url, "_self");
        }
    }

    public downloadFlyer(): void {
        let url = window.location.origin + '/api/ws/function/CustomerPortal/promote/pdf?appCode=' + this.appCode + '&&appId=' + this.appId;
        this.service.getInitData(this.appId).subscribe(res => {
            if (res.success) {
                if (res['appPromoteConfigData']) {
                    if (res['appPromoteConfigData']['app_share_config_data']) {
                        let appShareingSetting = res['appPromoteConfigData']['app_share_config_data'];
                        if (appShareingSetting.promote_bg_image) {
                            window.open(url, "_self");
                        } else {
                            this.pageService.showError('Please select or upload a screenshot to brand your flyer before downloading.');
                        }
                    } else {
                        this.pageService.showError('Please select or upload a screenshot to brand your flyer before downloading.');
                    }
                }
            }
        });
    }

    //********************************Email Marketting  **********************************/

    // public getAppTabsForEmailMarketting() {
    //     this.service.getAppsTabForEmailMarketting(this.appId).subscribe((res) => {
    //         if (res.success) {
    //             this.tabList = res['tabList'];
    //             this.tabList.unshift({ value: 0, label: 'Launch' })
    //         } else {
    //             console.log("server error occure");
    //         }
    //     });
    //     this.getInitData();
    // }

    public onCharCount(): void {
        let lng = this.emailMarketingSetting.promptText;
        if (lng) {
            let lngd = lng.length >= 127 ? (lng.length) : (lng.length - 1);
            this.charCount = 128 - lngd;
        }
    }

    public emailMarketingUserModel(): void {
        this.showEmailMarketingUserModel = true;
        this.pageService.onDialogOpen();
    }

    public deleteUserEmailId(): void {
        if (this.selectedEmailIds.length > 0 && this.selectedEmailIds.indexOf(true) !== -1) {
            var yes = window.confirm("Are you sure you want to delete the selected emails? ");
            if (yes) {
                this.deleteUserEmail();
            }
        }
    }

    public onChangeCheckAll(): void {
        this.refreshSelectedItem();
        if (!this.checkAll) {
            for (let i in this.emailMarketingUserList) {
                this.selectedEmailIds[this.emailMarketingUserList[i].id] = true;
            }
        }
        else {
            for (let i in this.emailMarketingUserList) {
                this.selectedEmailIds[this.emailMarketingUserList[i].id] = false;
            }
        }
    }

    public refreshSelectedItem(): void {
        this.selectedEmailIds = [];
    }

    public onCheckTabChange(checkedTabValue, checkedTab): void {
        let flag: boolean = true;
        if (checkedTabValue) {
            flag = false;
        } else {
            this.emailMarketingUserList.forEach((emailList) => {
                if (emailList.id != checkedTab) {
                    //if flag set to false don't check further
                    if (flag) {
                        if (this.selectedEmailIds[emailList.id]) {
                            flag = true;
                        } else {
                            flag = false;
                        }
                    }
                }
            });
        }
        this.checkAll = flag ? true : false;
    }

    public deleteUserEmail(): void {
        let ids: any[] = [];
        for (let i in this.selectedEmailIds) {
            if (this.selectedEmailIds[i]) {
                ids.push(i);
            }
        }
        this.showLoader = true;
        this.service.deleteUserEmail(ids).subscribe((res) => {
            if (res.success) {
                for (var i = 0; i < ids.length; i++) {
                    this.emailMarketingUserList.forEach((emailList, index) => {
                        if (emailList.id == ids[i]) {
                            this.emailMarketingUserList.splice(index, 1);
                        }
                    });
                }
                this.pageService.showSuccess(res.message);
                this.checkAll = false;
            } else {
                this.pageService.showError(res.message);
            }
            this.showLoader = false;
        });
    }

    public showMailchimpDialog(): void {
        this.showMailchimpDialogBox = true;
        this.pageService.onDialogOpen();
    }

    public onMailChimp(): void {
        this.mailChimp.appId = this.appId;
        this.mailChimp.tabId = 0;
        this.disableAddButton = true;
        this.service.uploadConMailChimp(this.mailChimp).subscribe((res) => {
            if (res.success) {
                this.pageService.showSuccess(res.message);
                this.mailChimp = new MailChimp();
                this.showMailchimpDialogBox = false;
            } else {
                this.pageService.showError(res.message);
            }
            this.disableAddButton = false;
        });
    }

    public showiContactDialog(): void {
        this.showiContactDialogBox = true;
        this.pageService.onDialogOpen();
        this.getMailData();
    }

    public getMailData(): void {
        this.service.getMailData(this.appId).subscribe((res) => {
            if (res.success) {
                if (res.data.iConnect) {
                    this.iContact = res.data.iConnect;
                }
            } else {
                this.pageService.showError(res.message);
            }
        });
    }

    public getIContactAcDetails(): void {
        this.iContact.tabId = 0;
        this.iContact.appId = this.appId;
        this.disableAddButton = true;
        this.malingService.getIContactAccountDetails(this.iContact).subscribe((res) => {
            if (res.success) {
                if (res.data.length) {
                    this.account.push({ label: '--Select an account--' });
                    for (let item of res.data) {
                        this.account.push({ label: item.first_name + ' ' + item.last_name, value: item.account_id })
                    }
                }
            } else {
                this.pageService.showError(res.message);
            }
            this.disableAddButton = false;
        });
    }

    public getIContactClientFolderId(event: any): void {
        this.iContact.tabId = 0;
        this.iContact.appId = this.appId;
        this.iContact.account_id = event.value;
        this.malingService.getIContactClientFolderId(this.iContact).subscribe((res) => {
            if (res.success) {
                if (res.data.length) {
                    this.folder.push({ label: '--Select an folder ID--' });
                    for (let item of res.data) {
                        this.folder.push({ label: item.client_folder_id, value: item.client_folder_id })
                    }
                }
            } else {
                this.pageService.showError(res.message);
            }
        });
    }

    public getIContactClientList(event: any): void {
        this.iContact.tabId = 0;
        this.iContact.appId = this.appId;
        this.iContact.client_folder_id = event.value;
        this.iContact.account_id = this.iContact.account_id;
        this.service.getIContactClientListByAppId(this.iContact).subscribe((res) => {
            if (res.success) {
                if (res.data.length) {
                    this.lists.push({ label: '--Select a List--' });
                    for (let item of res.data) {
                        this.lists.push({ label: item.name, value: item.listId })
                    }
                }
            } else {
                this.pageService.showError(res.message);
            }
        });
    }

    public uploadIContact(): void {
        this.iContact.tabId = 0;
        this.iContact.appId = this.appId;
        this.disableAddButton = true;
        this.service.uploadIcontactByAppId(this.iContact).subscribe((res) => {
            if (res.success) {
                this.pageService.showSuccess(res.message);
                this.iContact = new IContact();
                this.showiContactDialogBox = false;
            } else {
                this.pageService.showError(res.message);
            }
            this.disableAddButton = false;
        });
    }

    public showConstantContactDialog(): void {
        this.showConstantContactDialogBox = true;
        this.pageService.onDialogOpen();
    }

    public showCampaignMonitorDialog(): void {
        this.showCampaignMonitorDialogBox = true;
        this.pageService.onDialogOpen();
    }

    public showGetResponseDialog(): void {
        this.showGetResponseDialogBox = true;
        this.pageService.onDialogOpen();
    }

    public showMyEmmaDialog(): void {
        this.showMyEmmaDialogBox = true;
        this.pageService.onDialogOpen();
    }

    public downloadEmailMarketingEmailList(): void {
        let url = window.location.origin + '/api/ws/function/CustomerPortal/emailMarketting/downloadCsv/' + this.appId;
        window.open(url, "_self");
        this.newMailingListUserEmaiCount = 0;
    }

    public userActivitySelected(): void {
        this.showUserActivityLoader = true;
        this.getUserActivityData();
        this.userActivityList = [];
        this.showActivityList = [];
        this.featureActivityList = [];
        this.showFeatureActivityList = [];
    }

    public getUserActivityData(): void {
        this.service.getUserActivityData(this.appId).subscribe((res) => {
            if (res.success) {
                let users: any = res['userList'];
                let i = 0;
                for (let user in users) {
                    this.userActivityList.push(users[user]['user']);
                    this.featureActivityList.push(users[user]['feature_activity']);
                    this.toggleFeatureActivity[i] = true;
                    this.toggleSocialActivity[i] = true;
                    i++;
                }
                this.totalItems = this.userActivityList.length;
                let pageno = Math.ceil(this.totalItems / 20);
                this.count = [];
                for (let i = 1; i <= pageno; i++) {
                    this.count.push({ label: '' + i * 20 + '', value: i * 20 });
                }
                let userCount = this.userActivityList.length > this.itemsPerPage ? this.itemsPerPage : this.userActivityList.length;
                for (let i = 0; i < userCount; i++) {
                    this.showActivityList.push(this.userActivityList[i]);
                    this.showFeatureActivityList.push(this.featureActivityList[i]);
                }
                this.getStatistcis();
                this.selectedCount = this.itemsPerPage;
            }
            this.showUserActivityLoader = false;
        });
    }

    public showHideSocialActivity(i: number): void {
        this.toggleSocialActivity[i] = !this.toggleSocialActivity[i];
    }

    public showHideFeatureActivity(i: number): void {
        this.toggleFeatureActivity[i] = !this.toggleFeatureActivity[i];
    }

    public onCheckAllUserListChange(): void {
        this.refreshSelectedUser();
        if (!this.checkAllUserList) {
            for (let i in this.showActivityList) {
                this.selectedUsersIds[i] = true;
            }

        }
        else {
            for (let i in this.showActivityList) {
                this.selectedUsersIds[i] = false;
            }
        }
    }

    public refreshSelectedUser(): void {
        this.selectedUsersIds = [];
    }

    public onCheckUserChange(checkedUserValue, checkuser): void {
        // this.checkTrue = !this.checkTrue;
        let flag: boolean = true;
        if (checkedUserValue) {
            flag = false;
        } else {
            for (let i in this.showActivityList) {
                if (i == checkuser) {
                    if (!(!this.selectedUsersIds[i])) {
                        flag = false;
                        break;
                    }
                } else {
                    if (!this.selectedUsersIds[i]) {
                        flag = false;
                        break;
                    }
                }
            }
        }
        this.checkAllUserList = flag ? true : false;
    }

    public deleteUsers(): void {
        if (this.selectedUsersIds.length > 0 && this.selectedUsersIds.indexOf(true) !== -1) {
            var yes = window.confirm("Are you sure you want to delete the selected emails? ");
            if (yes) {
                this.deleteUserBasedOnDeviceUUid();
            }
        }
    }

    public deleteUserBasedOnDeviceUUid(): void {
        let deviceUuids: any[] = [];
        for (let i in this.selectedUsersIds) {
            if (this.selectedUsersIds[i]) {
                deviceUuids.push(this.userActivityList[i][0].device_uuid);
            }
        }
        this.showUserActivityLoader = true;
        this.service.deleteUsersBassisDevices(deviceUuids).subscribe((res) => {
            if (res.success) {
                this.selectedUsersIds = [];
                this.pageService.showSuccess(res.message);
                this.checkAllUserList = false;
                this.userActivitySelected();
            } else {
                this.pageService.showError(res.message);
            }
            this.showUserActivityLoader = false;
        });
    }

    public pageChanged(event: any): void {
        this.currentPage = event.page;
        let userCount = this.userActivityList.length > (this.itemsPerPage * this.currentPage) ? (this.itemsPerPage * this.currentPage) : this.userActivityList.length;
        this.showActivityList = [];
        this.showFeatureActivityList = [];
        this.showUserActivityLoader = true;
        for (let i = (this.currentPage - 1) * this.itemsPerPage; i < userCount; i++) {
            this.showActivityList.push(this.userActivityList[i]);
            this.showFeatureActivityList.push(this.featureActivityList[i]);
        }
        this.getStatistcis();
        this.showUserActivityLoader = false;
    }

    public setItemsPerPage(perPage: number): void {
        this.itemsPerPage = perPage;
        this.userActivitySelected();
    }

    public getStatistcis(): void {
        for (let i = 0; i < this.showFeatureActivityList.length; i++) {
            let chartlabel = [];
            let chartSeries = [];
            this.showChart[i] = false;
            for (let feature in this.showFeatureActivityList[i][0]) {
                chartlabel.push(feature);
                chartSeries.push({ meta: feature, value: this.showFeatureActivityList[i][0][feature] });
            }
            this.chartData[i] = {
                simpleBarData: {
                    labels: chartlabel,
                    series: [
                        chartSeries
                    ]
                },
                simpleBarOptions: this.chartBarOptions
            }
            setTimeout(() => {
                this.showChart[i] = true;
            }, 0);
        }
    }
}